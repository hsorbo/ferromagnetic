import json

def parse_igrf_cof(file_path):
    with open(file_path, "r") as file:
        lines = file.readlines()
    models = []
    current_model = None
    for line in lines:
        chunks = line.split()
        if line.startswith("   "):
            header = {
                "model": chunks[0],
                "epoch": float(chunks[1]),
                "max1": float(chunks[2]),
                "max2": float(chunks[3]),
                "max3": float(chunks[4]),
                "yrmin": float(chunks[5]),
                "yrmax": float(chunks[6]),
                "altmin": float(chunks[7]),
                "altmax": float(chunks[8]),
            }
            current_model = header
            current_model["coeffs"] = []
            models.append(header)
        else:
            coeffs = {
                "n": int(chunks[0]),
                "m": int(chunks[1]),
                "g1": float(chunks[2]),
                "h1": float(chunks[3]),
                "g2": float(chunks[4]),
                "h2": float(chunks[5]),
            }
            current_model["coeffs"].append(coeffs)
    return models


def parse_wmm_cof(file_path):
    with open(file_path, "r") as file:
        lines = file.readlines()
    models = []
    current_model = None
    for line in lines:
        chunks = line.split()
        if line.startswith("999999999999999999999"):
            break
        if line.startswith("   "):
            header = {
                "epoch": float(chunks[0]),
                "model": chunks[1],
                "date": chunks[2],
            }
            current_model = header
            current_model["coeffs"] = []
            models.append(header)
        else:
            coeffs = {
                "n": int(chunks[0]),
                "m": int(chunks[1]),
                "g1": float(chunks[2]),
                "h1": float(chunks[3]),
                "g2": float(chunks[4]),
                "h2": float(chunks[5]),
            }
            current_model["coeffs"].append(coeffs)
    return models

def parse_shc(file_path):
    models = []
    with open(file_path, "r") as file:
        lines = list(filter(lambda x: not x.startswith("#"), file.readlines()))
    names = []
    for line in lines:
        chunks = line.split()
        if line.startswith("c/s"):
            names = chunks[3:]
        if line.startswith("g/h"):
            names = list(map(lambda xy : f'{xy[0]} {int(float(xy[1]))}', zip(names, chunks[3:])))
            print(names)
    return models


def parse_shc_nosv(file_path):
    models = []
    with open(file_path, "r") as file:
        lines = list(filter(lambda x: not x.startswith("#"), file.readlines()))
    

    names = list(map(lambda x: f'IGRF{int(float(x))}', lines[1].split()))
    # names = list(map(lambda x: f'IGRF', lines[1].split()))
    print(names)

    # for line in lines[2:]:
    #     chunks = line.split()
    #     print(chunks)
    # return models


def generate_c(models):
    structs = """
typedef struct {
    int n;
    int m;
    double g1;
    double h1;
    double g2;
    double h2;
} coeffs_t;

typedef struct {
    char model[9];
    double yrmin;
    double yrmax;
    double altmin;
    double altmax;
    int max1;
    int max2;
    int max3;
    double epoch;
    int coeffs_size;
    coeffs_t *coeffs;
} model_t;
    """
    cofs = []
    models = []
    offset = 0
    for (i, model) in enumerate(models):
        models.append(f'{{ "{model['model']}", {model['yrmin']}, {model['yrmax']}, {model['altmin']}, {model['altmax']}, {model['max1']}, {model['max2']}, {model['max3']}, {model['epoch']},  {len(model['coeffs'])}, &coeffs[{offset}]}}')
        for c in model['coeffs']:
            offset += 1
            cofs.append(f"{{{c['n']}, {c['m']}, {c['g1']}, {c['h1']}, {c['g2']}, {c['h2']}}}")
    print("// AUTOGENERATED")
    print(f"#define MAXMOD {len(models)}")
    print(structs)
    print(f"coeffs_t coeffs[{len(cofs)}] = {{")
    print(",\n".join(cofs))
    print("};\n")
    print("model_t models[MAXMOD] = {")
    print(",\n".join(models))
    print("};")


# print(json.dumps(parse_igrf_cof("cof/IGRF14.COF")))
# print(json.dumps(parse_wmm_cof("cof/WMM2015v2.COF")))
# print(json.dumps(parse_shc("shc/igrf14coeffs.txt")))
# print(json.dumps(parse_shc_nosv("shc_nosv/IGRF14.shc")))

generate_c(parse_igrf_cof("cof/IGRF14.COF"))